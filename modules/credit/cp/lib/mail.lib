<?
  	function mailSend($sEmail, $sTpl,$from="")
	{
	 	global $mail_template_dir, $admin_mail,$language,$charset,$root_host;
		
		$chr = $charset;

		$usr = f(q("select language from dt_members where email = '$sEmail'"));
		if ($usr['language']){
			$user_template_dir = str_replace("$language/", $usr['language']."/", $mail_template_dir);
			switch ($usr[language]){
				case "eng":
					$chr = "iso-8859-1"; break;
				case "rus":
					$chr = "windows-1251"; break;
				case "heb":
					$chr = "windows-1255"; break;										
			}
		}
		else{
			$user_template_dir = $mail_template_dir;
		}
		
		if(!file_exists($user_template_dir.$sTpl))
		{
		 	return;
		}

		$handle = fopen($user_template_dir.$sTpl, "r");
		if(!$handle)
		{
		 	return;
		}

		$sContent = fread($handle, filesize($user_template_dir.$sTpl));
		fclose($handle);

		//	Defining subject

		$data = split("<-SUBJECT: ", $sContent);
                $data = split(" ->", $data[ 1 ]);

		$sSubject = $data[ 0 ];
		$sBody = $data[ 1 ];

		//	Parsing body

		$body = $sBody;

		for($ptr = 0; $ptr < strlen($body); $ptr++)
		{
		        switch($body[ $ptr ])
			{
			 	case "{":
					$is_token = 1;
					$token = "";
					break;
				case "}";
					$is_token = 0;

					eval("global \$".strtolower($token).";");
					eval("\$sVal = \$".strtolower($token).";");

					$sBody = eregi_replace("{{$token}}", "$sVal", $sBody);

					$token = "";
					break;
			}

		 	if(($body[ $ptr ] != "{" && $body[ $ptr ] != "}") && $is_token)
			{
			 	$token .= $body[ $ptr ];
			}
		}

	  if ($from){
	  //; 
	        $headers = "From: $from\r\n".
                 "Reply-To: $from\r\n".
				 "Mime-Version: 1.0\r\n".
				 "Content-type: text/html; charset=$chr"; 
	  }
	  else	{
	  //; charset=$chr\r\n
      	$headers = "From: $admin_mail\r\n".
                 "Reply-To: $admin_mail\r\n".
				 "Mime-Version: 1.0\r\n".
				 "Content-type: text/html; charset=$chr"; 
	  }

	    $sBody = nl2br(replaceURLs($sBody));
		
				//add header and footer
		$handle = fopen($user_template_dir."mail_top.php", "r");
		if ($handle){
			$header = fread($handle,50000);
			$header = str_replace("{root_host}",$root_host,$header); 
			$header = str_replace("{direction}",$direction,$header); 
			$sBody = $header . $sBody;
		}
		@fclose($handle);

		$handle = fopen($user_template_dir."mail_bottom.php", "r");
		if ($handle){
			$footer = fread($handle,50000);
			$footer = str_replace("{root_host}",$root_host,$footer);
			$footer = str_replace("{direction}",$direction,$footer);
			$sBody = $sBody . $footer;
		}
		@fclose($handle);
		
		//echo $sBody."<hr>";		

        $mres = mail($sEmail, $sSubject, $sBody, $headers);
        //$mres = smtpmail($sEmail, $sSubject, $sBody, $headers);
		//echo ("<!-- ".$sBody.'--'.$sEmail.'--'.$sSubject."--".$headers."--*".$mres."'*-->");
	}
	
	
	
function smtpmail($mail_to, $subject, $message, $headers = "")
{
	// For now I'm using an array based $smtp_vars to hold the smtp server
	// info, but it should probably change to $board_config...
	// then the relevant info would be $board_config['smtp_host'] and
	// $board_config['smtp_port'].
	global $admin_mail;
	$board_config = array();
	$board_config['smtp_host'] = "mail.valuehost.com";
	$board_config['smtp_username'] = "plusex59@valuehost.com";
	$board_config['smtp_password'] = "M51l48l";
	$board_config['board_email'] = $admin_mail;
	//
	// Fix any bare linefeeds in the message to make it RFC821 Compliant.
	//
	$message = preg_replace("/(?<!\r)\n/si", "\r\n", $message);

	if ($headers != "")
	{
		if(is_array($headers))
		{
			if(sizeof($headers) > 1)
			{
				$headers = join("\r\n", $headers);
			}
			else
			{
				$headers = $headers[0];
			}
		}
		$headers = chop($headers);

		//
		// Make sure there are no bare linefeeds in the headers
		//
		$headers = preg_replace("/(?<!\r)\n/si", "\r\n", $headers);
		//
		// Ok this is rather confusing all things considered,
		// but we have to grab bcc and cc headers and treat them differently
		// Something we really didn't take into consideration originally
		//
		$header_array = explode("\r\n", $headers);
		@reset($header_array);
		$headers = "";
		while( list(, $header) = each($header_array) )
		{
			if( preg_match("/^cc:/si", $header) )
			{
				$cc = preg_replace("/^cc:(.*)/si", "\\1", $header);
			}
			else if( preg_match("/^bcc:/si", $header ))
			{
				$bcc = preg_replace("/^bcc:(.*)/si", "\\1", $header);
				$header = "";
			}
			$headers .= $header . "\r\n";
		}
		$headers = chop($headers);
		$cc = explode(",", $cc);
		$bcc = explode(",", $bcc);
	}
	if($mail_to == "")
	{
		message_die(GENERAL_ERROR, "No email address specified", "", __LINE__, __FILE__);
	}
	if(trim($subject) == "")
	{
		message_die(GENERAL_ERROR, "No email Subject specified", "", __LINE__, __FILE__);
	}
	if(trim($message) == "")
	{
		message_die(GENERAL_ERROR, "Email message was blank", "", __LINE__, __FILE__);
	}
	$mail_to_array = explode(",", $mail_to);

	//
	// Ok we have error checked as much as we can to this point let's get on
	// it already.
	//
	if( !$socket = fsockopen($board_config['smtp_host'], 25, $errno, $errstr, 20) )
	{
		message_die(GENERAL_ERROR, "Could not connect to smtp host : $errno : $errstr", "", __LINE__, __FILE__);
	}
	server_parse($socket, "220");

	if( !empty($board_config['smtp_username']) && !empty($board_config['smtp_password']) )
	{ 
		// Send the RFC2554 specified EHLO. 
		// This improved as provided by SirSir to accomodate
		// both SMTP AND ESMTP capable servers
		fputs($socket, "EHLO " . $board_config['smtp_host'] . "\r\n"); 
		server_parse($socket, "250"); 

		fputs($socket, "AUTH LOGIN\r\n"); 
		server_parse($socket, "334"); 
		fputs($socket, base64_encode($board_config['smtp_username']) . "\r\n"); 
		server_parse($socket, "334"); 
		fputs($socket, base64_encode($board_config['smtp_password']) . "\r\n"); 
		server_parse($socket, "235"); 
	} 
	else 
	{ 
		// Send the RFC821 specified HELO. 
		fputs($socket, "HELO " . $board_config['smtp_host'] . "\r\n"); 
		server_parse($socket, "250"); 
	}

	// From this point onward most server response codes should be 250
	// Specify who the mail is from....
	fputs($socket, "MAIL FROM: <" . $board_config['board_email'] . ">\r\n");
	server_parse($socket, "250");

	// Specify each user to send to and build to header.
	$to_header = "To: ";
	@reset( $mail_to_array );
	while( list( , $mail_to_address ) = each( $mail_to_array ))
	{
		//
		// Add an additional bit of error checking to the To field.
		//
		$mail_to_address = trim($mail_to_address);
		if ( preg_match('/[^ ]+\@[^ ]+/', $mail_to_address) )
		{
			fputs( $socket, "RCPT TO: <$mail_to_address>\r\n" );
			server_parse( $socket, "250" );
		}
		$to_header .= ( ( $mail_to_address != '' ) ? ', ' : '' ) . "<$mail_to_address>";
	}
	// Ok now do the CC and BCC fields...
	@reset( $bcc );
	while( list( , $bcc_address ) = each( $bcc ))
	{
		//
		// Add an additional bit of error checking to bcc header...
		//
		$bcc_address = trim( $bcc_address );
		if ( preg_match('/[^ ]+\@[^ ]+/', $bcc_address) )
		{
			fputs( $socket, "RCPT TO: <$bcc_address>\r\n" );
			server_parse( $socket, "250" );
		}
	}
	@reset( $cc );
	while( list( , $cc_address ) = each( $cc ))
	{
		//
		// Add an additional bit of error checking to cc header
		//
		$cc_address = trim( $cc_address );
		if ( preg_match('/[^ ]+\@[^ ]+/', $cc_address) )
		{
			fputs($socket, "RCPT TO: <$cc_address>\r\n");
			server_parse($socket, "250");
		}
	}
	// Ok now we tell the server we are ready to start sending data
	fputs($socket, "DATA\r\n");

	// This is the last response code we look for until the end of the message.
	server_parse($socket, "354");

	// Send the Subject Line...
	fputs($socket, "Subject: $subject\r\n");

	// Now the To Header.
	fputs($socket, "$to_header\r\n");

	// Now any custom headers....
	fputs($socket, "$headers\r\n\r\n");

	// Ok now we are ready for the message...
	fputs($socket, "$message\r\n");

	// Ok the all the ingredients are mixed in let's cook this puppy...
	fputs($socket, ".\r\n");
	server_parse($socket, "250");

	// Now tell the server we are done and close the socket...
	fputs($socket, "QUIT\r\n");
	fclose($socket);

	return TRUE;
}

function server_parse($socket, $response) 
{ 
   while ( substr($server_response,3,1) != ' ' ) 
   { 
      if( !( $server_response = fgets($socket, 256) ) ) 
      { 
         die("Couldn't get mail server response codes"); 
      } 
   } 

   if( !( substr($server_response, 0, 3) == $response ) ) 
   { 
      die("Ran into problems sending Mail. Response: $server_response"); 
   } 
} 
?>